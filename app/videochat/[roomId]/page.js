"use client"
import React, { useEffect, useState, useRef } from 'react'
// import { io } from 'socket.io-client'
import { useSearchParams } from "next/navigation";
import { useRouter } from 'next/navigation';
import socket from '../../../socket';
import Peer from 'simple-peer';

function Page({ params }) {
    const router = useRouter();
    // const [socket, setSocket] = useState(null);
    const [currentUserId, setCurrentUserId] = useState(null);
    const [roomId, setRoomId] = useState(null);
    const [usersInRoom, setUsersInRoom] = useState([]);
    const [stream, setStream] = useState(null);
    const [peer, setPeer] = useState(null);
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState("");

    // Use refs to store current values
    const userIdRef = useRef(null);
    const roomIdRef = useRef(null);
    const streamRef = useRef(null);
    const localVideoRef = useRef(null);
    const remoteVideoRef = useRef(null);
    const peerRef = useRef(null);

    // Update refs when states change
    useEffect(() => {
        userIdRef.current = currentUserId;
    }, [currentUserId]);

    useEffect(() => {
        roomIdRef.current = roomId;
    }, [roomId]);

    useEffect(() => {
        streamRef.current = stream;
    }, [stream]);

    useEffect(() => {
        const getMedia = async () => {
            try {
                const mediaStream = await navigator.mediaDevices.getUserMedia({
                    video: true,
                    audio: true
                });
                setStream(mediaStream);
                streamRef.current = mediaStream;

                if (localVideoRef.current) {
                    localVideoRef.current.srcObject = mediaStream;
                }
            } catch (err) {
                console.error("Error accessing media devices:", err);
            }
        };

        getMedia();

        return () => {
            if (streamRef.current) {
                streamRef.current.getTracks().forEach(track => track.stop());
            }
        };
    }, []);

    useEffect(() => {
        if (!stream) return;

        const initializeRoom = async () => {
            try {
                const response = await fetch("/api/getCurrentUser");
                const userData = await response.json();
                const currentRoomId = params.roomId;

                setCurrentUserId(userData.userId);
                setRoomId(currentRoomId);


                userIdRef.current = userData.userId;
                roomIdRef.current = currentRoomId;

                // Clean up previous listeners
                socket.off("userJoined");
                socket.off("userLeft");
                socket.off("usersInRoom");
                socket.off("signalData");
                socket.off("receiveMessage"); // Add this

                // Add message listener here
                socket.on("receiveMessage", (message) => {
                    console.log("Received message:", message);
                    setMessages((prevMessages) => [...prevMessages, { text: message.text, sender: "partner" }]);
                });

                // Set up signal data handler BEFORE joining room
                socket.on('signalData', (data) => {
                    console.log('Received signal from peer', data);
                    if (data.userId !== userData.userId && peerRef.current) {
                        console.log('Processing signal with current peer');
                        peerRef.current.signal(data.signal);
                    }
                });

                socket.on("usersInRoom", (users) => {
                    console.log("Users in room:", users);
                    setUsersInRoom(users);

                    // First user creates offer when second user joins
                    if (users.length === 2) {
                        if (users[0] === userData.userId) {
                            console.log("Creating offer as first user");
                            const newPeer = new Peer({
                                initiator: true,
                                stream: streamRef.current, // Use existing stream
                                trickle: false,
                                config: {
                                    iceServers: [
                                        { urls: 'stun:stun.l.google.com:19302' },
                                        { urls: 'stun:global.stun.twilio.com:3478' }
                                    ]
                                }
                            });

                            // Handle signals generated by this peer
                            newPeer.on('signal', (signal) => {
                                console.log('Generated signal as initiator', signal);
                                socket.emit('signal', {
                                    roomId: currentRoomId,
                                    userId: userData.userId,
                                    signal: signal
                                });
                            });

                            newPeer.on('stream', (remoteStream) => {
                                console.log("Received remote stream as initiator", remoteStream);
                                if (remoteVideoRef.current) {
                                    remoteVideoRef.current.srcObject = remoteStream;
                                }
                            });

                            // Update both state and ref
                            setPeer(newPeer);
                            peerRef.current = newPeer; // Update ref immediately
                        }
                        else {
                            console.log("Creating answer as second user");
                            const newPeer = new Peer({
                                initiator: false,
                                stream: streamRef.current, // Use existing stream
                                trickle: false,
                                config: {
                                    iceServers: [
                                        { urls: 'stun:stun.l.google.com:19302' },
                                        { urls: 'stun:global.stun.twilio.com:3478' }
                                    ]
                                }
                            });

                            // Handle signals generated by this peer
                            newPeer.on('signal', (signal) => {
                                console.log('Generated signal as responder', signal);
                                socket.emit('signal', {
                                    roomId: currentRoomId,
                                    userId: userData.userId,
                                    signal: signal
                                });
                            });

                            newPeer.on('stream', (remoteStream) => {
                                console.log("Received remote stream as responder", remoteStream);
                                if (remoteVideoRef.current) {
                                    remoteVideoRef.current.srcObject = remoteStream;
                                }
                            });

                            // Update both state and ref
                            setPeer(newPeer);
                            peerRef.current = newPeer; // Update ref immediately
                        }
                    }
                });

                socket.on("userLeft", (leftUserId) => {
                    console.log("User left:", leftUserId);
                    console.log("User left:", leftUserId);
                    if (peer) {
                        peer.destroy();
                        setPeer(null);
                    }
                    if (remoteVideoRef.current) {
                        remoteVideoRef.current.srcObject = null;
                    }
                });


                // Join room
                socket.emit("joinRoom", currentRoomId, userData.userId);

            } catch (error) {
                console.error("Error initializing room:", error);
            }
        };

        initializeRoom();

        return () => {
            if (peerRef.current) {
                peerRef.current.destroy();
                peerRef.current = null;
            }
            if (peer) {
                setPeer(null);
            }
            socket.off("receiveMessage"); // Add this
        };
    }, [stream]);

    const handleJoinAnotherRoom = async () => {
        if (peer) {
            peer.destroy();
            setPeer(null);
        }
        if (peerRef.current) {
            peerRef.current.destroy();
            peerRef.current = null;
        }
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
        socket.emit("leaveRoom", roomId, currentUserId);
        socket.emit("findRooms", currentUserId);
        socket.on("roomsFound", (rooms) => {
            console.log(rooms);
            router.push(`/videochat/${rooms[0]}`);
        });
        socket.on("noRoomsFound", () => {
            alert("No rooms found. Please create a new room.");
        });
        router.push("/videochat");
    }

    const handleSendMessage = () => {
        if (newMessage.trim() === "") return;

        const message = {
            text: newMessage,
            sender: "me"
        };

        setMessages([...messages, message]);
        
        socket.emit("sendMessage", roomId, currentUserId, newMessage);
        setNewMessage("");
    }

    return (
        <div className="flex h-full bg-gray-100">
            {/* Video Section */}
            <div className="w-3/4 flex flex-col p-6">
                {/* Partner Video */}
                <div className="border-2 border-blue-500 rounded-xl mb-10">
                    {/* Added styling */}
                    <div className="bg-black w-full  h-80 flex rounded-xl items-center justify-center">
                        <video
                            ref={remoteVideoRef}
                            autoPlay
                            className="w-full h-full object-cover rounded-xl"
                        />
                    </div>
                </div>

                {/* Local User Video */}
                <div className=" mb-10 border-2 w-1/3 border-yellow-500 rounded-xl ">
                    {/* Added styling */}
                    <div className="bg-black w-full h-40 flex rounded-xl items-center justify-center">
                        <video
                            ref={localVideoRef}
                            autoPlay
                            muted
                            className="w-full h-full object-cover rounded-xl"
                        />
                    </div>
                </div>

                {/* Buttons */}
                <div className="flex justify-between items-center  ">
                    <div className="space-x-2">
                        <button
                            className="px-6 py-2 bg-red-300 rounded text-gray-700 font-semibold"
                            onClick={() => router.push("/videochat")}
                        >
                            Cancel
                        </button>
                        <button
                            className="px-6 py-2 bg-blue-300 rounded text-gray-700 font-semibold"
                            onClick={handleJoinAnotherRoom}
                        >
                            Join Another Room
                        </button>
                    </div>
                </div>
            </div>

            {/* Black Divider */}
            <div className="bg-black w-1"></div>

            {/* Chatbox Section */}
            <div
                className="w-1/2 flex flex-col p-4 rounded-lg"
                style={{
                    backgroundImage: "url('/background_chat.jpg')",
                    backgroundSize: "cover", // or 'contain', '100% 100%', etc.
                    backgroundRepeat: "no-repeat",
                    backgroundColor: "#D3D3D3",
                }}
            >
                <div className="flex-grow overflow-y-auto p-2">
                    {messages.map((message, index) => (
                        <div
                            key={index}
                            className={`mb-2 rounded-lg p-2 max-w-xs ${message.sender === "me" ? "bg-teal-300 ml-auto text-black" : "bg-gray-400 mr-auto"
                                }`}
                        >
                            {message.text}
                        </div>
                    ))}
                </div>

                <div className="flex items-center p-2 mt-4 bg-blue-700 rounded-lg">
                    <input
                        type="text"
                        className="flex-grow rounded-lg py-2 px-3 text-black"
                        placeholder="Type your message..."
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        onKeyDown={(e) => {
                            if (e.key === "Enter") {
                                handleSendMessage();
                            }
                        }}
                    />
                    <button
                        className="ml-2 px-4 py-2 bg-blue-500 text-black rounded-lg hover:bg-blue-600"
                        onClick={handleSendMessage}
                    >
                        Send
                    </button>
                </div>
            </div>
        </div>
    );
}

export default Page;
